@startuml
title Forgot Password Use Case - Sequence Diagram

actor User
participant "Frontend" as FE
participant "AuthController" as Controller
participant "AuthService" as Service
participant "UserRepository" as UserRepo
participant "UserTokenRepository" as TokenRepo
participant "MailService" as Mail
database "Database" as DB

== Request Password Reset ==
User -> FE : Click "Forgot Password"\nEnter email
FE -> Controller : POST /auth/forgot-password { email }
Controller -> Service : forgotPassword(dto)
Service -> UserRepo : findOne({ email })
UserRepo -> DB : Query user by email
DB --> UserRepo : User or null
UserRepo --> Service : User or null

alt User exists
    Service -> TokenRepo : update({ userId, type: PASSWORD_RESET, isActive: true }, { isActive: false })
    TokenRepo -> DB : Deactivate old tokens
    DB --> TokenRepo : OK
    Service -> Service : generate reset token
    Service -> TokenRepo : create/save new PASSWORD_RESET token
    TokenRepo -> DB : Insert token
    DB --> TokenRepo : OK
    TokenRepo --> Service : Token
    Service -> Mail : sendPasswordResetEmail(email, name, token)
    Mail -> Mail : Compose email
    Mail -> Mail : Send via nodemailer
    Mail --> Service : OK
else User not found
    Service -> Service : (Do nothing, return success)
end
Service --> Controller : { success: true }
Controller --> FE : 200 OK

== User Clicks Reset Link ==
User -> FE : Click link in email\n(reset-password?token=...)
FE -> Controller : POST /auth/reset-password { token, newPassword }
Controller -> Service : resetPassword(dto)
Service -> TokenRepo : findOne({ token, type: PASSWORD_RESET, isActive: true })
TokenRepo -> DB : Query token
DB --> TokenRepo : Token or null
TokenRepo --> Service : Token or null

alt Token valid
    Service -> UserRepo : update(userId, { password: newPassword })
    UserRepo -> DB : Update password
    DB --> UserRepo : OK
    Service -> TokenRepo : update(tokenId, { isActive: false })
    TokenRepo -> DB : Deactivate token
    DB --> TokenRepo : OK
    Service -> TokenRepo : update({ userId, type: REFRESH_TOKEN, isActive: true }, { isActive: false })
    TokenRepo -> DB : Deactivate all refresh tokens
    DB --> TokenRepo : OK
    Service --> Controller : { success: true }
else Token invalid/expired
    Service --> Controller : 401 Unauthorized
end
Controller --> FE : 200 OK or error

@enduml
